import os
from datetime import datetime
from typing import List, Optional
from dataclasses import dataclass
from db_driver import Patient

@dataclass
class ReportData:
    patient: Patient
    symptoms: List[str]
    consultation_date: datetime

class ReportGenerator:
    """
    Handles generation and saving of diagnostic reports for patient consultations.
    """
    
    def __init__(self, reports_folder: str = "doctor"):
        self.reports_folder = reports_folder
    
    def generate_diagnostic_report(self, patient: Patient, symptoms: List[str], 
                                 consultation_date: Optional[datetime] = None) -> str:
        """
        Generate a structured diagnostic report containing patient information and symptoms.
        
        Args:
            patient: Patient object with personal information
            symptoms: List of symptom descriptions collected during consultation
            consultation_date: Date of consultation (defaults to current time)
            
        Returns:
            Formatted report content as string
        """
        if consultation_date is None:
            consultation_date = datetime.now()
        
        # Format patient information section
        patient_info = self._format_patient_info(patient)
        
        # Format symptoms section
        symptoms_section = self._format_symptoms(symptoms)
        
        # Generate complete report
        report_content = f"""HEALTH ASSISTANT DIAGNOSTIC REPORT
{'=' * 50}

CONSULTATION DATE: {consultation_date.strftime('%Y-%m-%d %H:%M:%S')}
PATIENT ID: {patient.patient_id}

{patient_info}

{symptoms_section}

REPORT GENERATED: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

{'=' * 50}
NOTE: This is an initial assessment report generated by an AI health assistant.
Please consult with a qualified healthcare professional for proper medical diagnosis and treatment.
"""
        
        return report_content
    
    def _format_patient_info(self, patient: Patient) -> str:
        """Format patient information section of the report."""
        return f"""PATIENT INFORMATION:
Name: {patient.name}
Age: {patient.age} years
Height: {patient.height} cm
Weight: {patient.weight} kg
Gender: {patient.gender}
Blood Group: {patient.blood_group}
Profile Created: {patient.created_at.strftime('%Y-%m-%d') if patient.created_at else 'Unknown'}"""
    
    def _format_symptoms(self, symptoms: List[str]) -> str:
        """Format symptoms section of the report."""
        if not symptoms:
            return "SYMPTOMS REPORTED:\nNo symptoms were reported during this consultation."
        
        symptoms_text = "SYMPTOMS REPORTED:\n"
        for i, symptom in enumerate(symptoms, 1):
            symptoms_text += f"{i}. {symptom}\n"
        
        return symptoms_text.rstrip()  # Remove trailing newline
    
    def save_report(self, content: str, patient_name: str, 
                   consultation_date: Optional[datetime] = None) -> str:
        """
        Save the diagnostic report to a file in the doctor folder.
        
        Args:
            content: The report content to save
            patient_name: Patient's name for filename generation
            consultation_date: Date of consultation for filename (defaults to current time)
            
        Returns:
            Path to the saved report file
            
        Raises:
            OSError: If file system operations fail
        """
        if consultation_date is None:
            consultation_date = datetime.now()
        
        # Ensure doctor folder exists
        self._ensure_reports_folder_exists()
        
        # Generate unique filename
        filename = self._generate_filename(patient_name, consultation_date)
        filepath = os.path.join(self.reports_folder, filename)
        
        try:
            # Write report to file
            with open(filepath, 'w', encoding='utf-8') as file:
                file.write(content)
            
            return filepath
            
        except OSError as e:
            # Handle file system errors gracefully
            error_msg = f"Failed to save report to {filepath}: {str(e)}"
            raise OSError(error_msg) from e
    
    def _ensure_reports_folder_exists(self):
        """Create the reports folder if it doesn't exist."""
        try:
            os.makedirs(self.reports_folder, exist_ok=True)
        except OSError as e:
            error_msg = f"Failed to create reports folder '{self.reports_folder}': {str(e)}"
            raise OSError(error_msg) from e
    
    def _generate_filename(self, patient_name: str, consultation_date: datetime) -> str:
        """
        Generate a unique filename using patient name and timestamp.
        
        Args:
            patient_name: Patient's name
            consultation_date: Date of consultation
            
        Returns:
            Unique filename string
        """
        # Sanitize patient name for filename (remove/replace invalid characters)
        safe_name = "".join(c for c in patient_name if c.isalnum() or c in (' ', '-', '_')).strip()
        safe_name = safe_name.replace(' ', '_')
        
        # Format timestamp for filename
        timestamp = consultation_date.strftime('%Y%m%d_%H%M%S')
        
        # Generate filename
        filename = f"{safe_name}_{timestamp}_report.txt"
        
        return filename
    
    def generate_and_save_report(self, patient: Patient, symptoms: List[str], 
                               consultation_date: Optional[datetime] = None) -> str:
        """
        Convenience method to generate and save a report in one operation.
        
        Args:
            patient: Patient object with personal information
            symptoms: List of symptom descriptions
            consultation_date: Date of consultation (defaults to current time)
            
        Returns:
            Path to the saved report file
            
        Raises:
            OSError: If file system operations fail
        """
        if consultation_date is None:
            consultation_date = datetime.now()
        
        # Generate report content
        content = self.generate_diagnostic_report(patient, symptoms, consultation_date)
        
        # Save report to file
        filepath = self.save_report(content, patient.name, consultation_date)
        
        return filepath